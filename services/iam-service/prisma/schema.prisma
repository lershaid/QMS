// Prisma schema for IAM Service
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenancy: Each organization is a tenant
model Tenant {
  id          String   @id @default(uuid())
  name        String
  subdomain   String   @unique
  settings    Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
  roles       Role[]
}

// Users with OAuth 2.0 support
model User {
  id              String    @id @default(uuid())
  tenantId        String
  email           String
  passwordHash    String
  firstName       String
  lastName        String
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles       UserRole[]
  sessions        Session[]
  auditLogs       AuditLog[]
  
  @@unique([tenantId, email])
  @@index([email])
}

// Roles for RBAC
model Role {
  id            String   @id @default(uuid())
  tenantId      String
  name          String
  description   String?
  isSystemRole  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permissions   RolePermission[]
  userRoles     UserRole[]
  
  @@unique([tenantId, name])
}

// Permissions
model Permission {
  id              String   @id @default(uuid())
  resource        String
  action          String
  description     String?
  createdAt       DateTime @default(now())
  
  rolePermissions RolePermission[]
  
  @@unique([resource, action])
}

// Many-to-many: Role <-> Permission
model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
}

// Many-to-many: User <-> Role
model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
}

// Session management for JWT tokens
model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

// Audit log for compliance
model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([resource, resourceId])
  @@index([createdAt])
}
